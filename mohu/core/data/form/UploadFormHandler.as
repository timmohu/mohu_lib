package mohu.core.data.form {	import flash.errors.IllegalOperationError;	import flash.events.DataEvent;	import flash.events.Event;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.FileReference;	import flash.net.URLRequest;	[Event (name="uploadCompleteData", type="flash.events.DataEvent")];	public class UploadFormHandler extends FormHandler {		private var _uploadFileRef:FileReference;		private var _fieldName:String;		public function UploadFormHandler( url:String = null, upload:FileReference = null, fieldName:String = "Filedata", vars:Object = null, method:String = "POST", requestHeaders:Array = null ) {			_uploadFileRef = upload;			_fieldName = fieldName;			super(url, vars, method, null, "multipart/form-data", requestHeaders);		}						override public function submit():void {			if ( !submitURL ) throw new ReferenceError("No Submit URL specified");			if ( !_uploadFileRef ) throw new ReferenceError("No upload specified");			var request:URLRequest = getURLRequest();			_uploadFileRef.upload(request, _fieldName);		}						override public function set dataFormat( value:String ):void {			throw new IllegalOperationError("UploadFormHandler cannot specify a dataFormat");		}						override public function set contentType( value:String ):void {			throw new IllegalOperationError("UploadFormHandler cannot specify a custom contentType");		}						public function get upload():FileReference {			return _uploadFileRef;		}						public function set upload( value:FileReference ):void {			if ( _uploadFileRef ) {				_uploadFileRef.removeEventListener(Event.OPEN, onRelayEvent);				_uploadFileRef.removeEventListener(Event.COMPLETE, onRelayEvent);				_uploadFileRef.removeEventListener(ProgressEvent.PROGRESS, onRelayEvent);				_uploadFileRef.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onRelayEvent);				_uploadFileRef.removeEventListener(IOErrorEvent.IO_ERROR, onRelayEvent);				_uploadFileRef.removeEventListener(HTTPStatusEvent.HTTP_STATUS, onRelayEvent);				_uploadFileRef.removeEventListener(DataEvent.UPLOAD_COMPLETE_DATA, onRelayEvent);			}			_uploadFileRef = value;			if ( value ) {				_uploadFileRef.addEventListener(Event.OPEN, onRelayEvent, false, 0, true);				_uploadFileRef.addEventListener(Event.COMPLETE, onRelayEvent, false, 0, true);				_uploadFileRef.addEventListener(ProgressEvent.PROGRESS, onRelayEvent, false, 0, true);				_uploadFileRef.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onRelayEvent, false, 0, true);				_uploadFileRef.addEventListener(IOErrorEvent.IO_ERROR, onRelayEvent, false, 0, true);				_uploadFileRef.addEventListener(HTTPStatusEvent.HTTP_STATUS, onRelayEvent, false, 0, true);				_uploadFileRef.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, onRelayEvent, false, 0, true);			}		}						private function onRelayEvent( event:Event ):void {			if ( event.type == DataEvent.UPLOAD_COMPLETE_DATA ) setLastResult(( event as DataEvent ).data);			dispatchEvent(event);		}	}}