package mohu.core.data.amf {	import flash.events.EventDispatcher;	import flash.events.NetStatusEvent;	import flash.net.NetConnection;	import flash.net.Responder;	[Event(name="AMF_ERROR", type="mohu.core.data.amf.AMFErrorEvent")]	public class AMFGateway extends EventDispatcher {		private var _gatewayURL:String;		private var _amfConnection:NetConnection;		private var _amfQueue:Array = [];		private var _currentOperation:AMFOperation;		private var _responder:Responder = new Responder(onOperationSuccess, onOperationFail);		public function AMFGateway(gatewayURL:String, objectEncoding:uint = 3) {			super();			_gatewayURL = gatewayURL;			_amfConnection = new NetConnection();			_amfConnection.objectEncoding = objectEncoding;			_amfConnection.addEventListener(NetStatusEvent.NET_STATUS, onError, false, 0, true);			try {				_amfConnection.connect(gatewayURL);			} catch (_e:ArgumentError) {				throw new ArgumentError("Unable to connect to AMF gateway at " + gatewayURL);			}		}						public function queueAmfOperation( operation:AMFOperation ):AMFOperation {			if ( !operation ) throw new ArgumentError("No operation specified");			_amfQueue.push(operation);			if ( !_currentOperation ) this.nextAmfOperation();			return operation;		}						private function nextAmfOperation():void {			_currentOperation = _amfQueue.shift();			var operation:String = _currentOperation.service + "." + _currentOperation.operation;			if ( !_currentOperation.arguments ) {				_amfConnection.call(operation, _responder);			} else {				_amfConnection.call.apply(null, [operation, _responder].concat(_currentOperation.arguments));			}		}						private function onOperationSuccess( result:Object ):void {			completeOperation(result, true);		}						private function onOperationFail( fault:Object ):void {			completeOperation(fault, false);		}						private function completeOperation( result:Object, success:Boolean ):void {			_currentOperation.success = success;			_currentOperation.result = result;			if ( success ) {				if ( _currentOperation.onComplete != null ) _currentOperation.onComplete(result);			} else {				if ( _currentOperation.onFault != null ) _currentOperation.onFault(result); else dispatchEvent(new AMFErrorEvent(AMFErrorEvent.AMF_ERROR, result.description, "error"));			}			_currentOperation = null;			if ( _amfQueue.length > 0 ) nextAmfOperation();		}						private function onError( e:NetStatusEvent ):void {			dispatchEvent(new AMFErrorEvent(AMFErrorEvent.AMF_ERROR, e.info.code, e.info.level));		}						public function get amfQueue():Array {			return _amfQueue.slice();		}						public function get currentOperation():AMFOperation {			return _currentOperation;		}						public function get objectEncoding():uint {			return _amfConnection.objectEncoding;		}	}}