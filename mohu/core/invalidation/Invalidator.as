package mohu.core.invalidation {	import flash.display.DisplayObject;	import flash.display.Shape;	import flash.events.Event;	import flash.events.EventDispatcher;	public class Invalidator extends EventDispatcher {		public static const instance:Invalidator = new Invalidator();		public static function add(_invalidationClient:IInvalidationClient):IInvalidationClient {			return Invalidator.instance.add(_invalidationClient);		}						public static function remove(_invalidationClient:IInvalidationClient):IInvalidationClient {			return Invalidator.instance.remove(_invalidationClient);		}						public static function destroy():void {			Invalidator.instance.destroy();		}						public static function get invalidationList():Array {			return Invalidator.instance.invalidationList;		}		private var _target:DisplayObject;		private var _invalidationList:Array = [];		public function Invalidator(_target:DisplayObject = null) {			_target = (_target ? _target : new Shape());			_target.addEventListener(Event.ENTER_FRAME, onEnterFrame);		}						private function onEnterFrame(_e:Event):void {			while (_invalidationList.length > 0) (_invalidationList.shift() as IInvalidationClient).forceImmediateUpdate();		}						public function add(_invalidationClient:IInvalidationClient):IInvalidationClient {			if (!_invalidationClient) throw new ArgumentError("No InvalidationClient specified");			if (Invalidator.invalidationList.indexOf(_invalidationClient) == -1) _invalidationList.push(_invalidationClient);			return _invalidationClient;		}						public function remove(_invalidationClient:IInvalidationClient):IInvalidationClient {			// Only use this function if you want to manually remove an item from the invalidation list			if (!_invalidationClient) throw new ArgumentError("No InvalidationClient specified");			var index:int = _invalidationList.indexOf(_invalidationClient);			if (index == -1) throw new ArgumentError("InvalidationClient '" + _invalidationClient + "' is not on the invalidation list");			_invalidationList.splice(index, 1);			return _invalidationClient;		}						public function destroy():void {			_target.removeEventListener(Event.ENTER_FRAME, onEnterFrame);			_invalidationList = null;		}						public function get invalidationList():Array {			return _invalidationList.slice();		}	}}