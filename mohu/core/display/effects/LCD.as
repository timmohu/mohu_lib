package mohu.core.display.effects {	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.geom.Matrix;	public class LCD extends Bitmap {		private var d_source:DisplayObject;		private var b_transparent:Boolean;		private var u_backgroundColour:uint;		public function LCD(source:DisplayObject = null, transparent:Boolean = true, smoothing:Boolean = false, pixelSnapping:String = "auto", backgroundColour:uint = 0x00000000) {			d_source = source;			b_transparent = transparent;			u_backgroundColour = backgroundColour;			super(null, pixelSnapping, smoothing);			this.redraw();		}						public function redraw():void {			LCD.draw(this.source, this, this.transparent, this.backgroundColour);		}						public static function draw(source:DisplayObject, output:Bitmap, transparent:Boolean = true, backgroundColour:uint = 0x00000000, red:uint = 0xFFFF0000, green:uint = 0xFF00FF00, blue:uint = 0xFF0000FF):void {			var bmdSource:BitmapData = new BitmapData(source.width / 3, source.height / 3, transparent, backgroundColour);			bmdSource.draw(source, new Matrix(1 / 3, 0, 0, 1 / 3));			var aColours:Array = [red, green, blue];			var coloursLength:uint = aColours.length;			var bd:BitmapData = new BitmapData(bmdSource.width * coloursLength, bmdSource.height * coloursLength, transparent, 0);			for (var uX:uint = 0;uX < bmdSource.width;uX++) {				for (var uY:uint = 0;uY < bmdSource.height;uY++) {					for (var col:uint = 0;col < coloursLength;col++) {						for (var row:uint = 0;row < coloursLength;row++) {							if (transparent) {								bd.setPixel32(uX * coloursLength + col, uY * coloursLength + row, bmdSource.getPixel32(uX, uY) & aColours[col]);							} else {								bd.setPixel(uX * coloursLength + col, uY * coloursLength + row, bmdSource.getPixel(uX, uY) & aColours[col]);															}						}					}				}			}			output.bitmapData = bd;		}						public function get source():DisplayObject {			return d_source;		}						public function get transparent():Boolean {			return b_transparent;		}						public function get backgroundColour():uint {			return u_backgroundColour;		}						public function set source(value:DisplayObject):void {			d_source = value;		}						public function set transparent(value:Boolean):void {			b_transparent = value;		}						public function set backgroundColour(value:uint):void {			u_backgroundColour = value;		}	}}