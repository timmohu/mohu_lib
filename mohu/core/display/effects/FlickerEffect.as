package mohu.core.display.effects {	import flash.display.BitmapData;	import flash.display.BitmapDataChannel;	import flash.display.DisplayObject;	import flash.filters.DisplacementMapFilter;	import flash.geom.Point;	import flash.geom.Rectangle;	public class FlickerEffect {		private var _target:DisplayObject;		private var _displacementStrength:uint;		private var _displacementVariation:uint;		private var _displacementMode:String;		private var _flickerFrequency:Number;		private var _displacementMap:BitmapData;		private var _bounds:Rectangle;		private var _visible:Boolean;		private var _filters:Array;		public function FlickerEffect(target:DisplayObject, bounds:Rectangle = null, displacementStrength:uint = 128, displacementVariation:uint = 4, flickerFrequency:Number = 0.3, displacementMode:String = "clamp") {			_target = target;			_flickerFrequency = flickerFrequency;			_displacementStrength = displacementStrength;			_displacementVariation = displacementVariation;			_displacementMode = displacementMode;			_bounds = (bounds ? bounds : target.getBounds(target));			_displacementMap = new BitmapData(this.width, this.height, false);			this.visible = true;		}						public function redraw(forceFlicker:Boolean = false):void {			this.target.filters = (this.visible && (forceFlicker || (Math.random() <= this.flickerFrequency)) ? this.filters.concat(this.getDisplacementFilter(true)) : this.filters);		}						private function getDisplacementFilter(regenerate:Boolean):DisplacementMapFilter {			if (regenerate) this.drawDisplacementGradient(this.displacementMap, this.displacementVariation);			return new DisplacementMapFilter(this.displacementMap, new Point(this.bounds.x, this.bounds.y), BitmapDataChannel.BLUE, 0, this.displacementStrength, 0, this.displacementMode);		}						private function drawDisplacementGradient(bd:BitmapData, variation:uint):void {			var $_colour:uint = 128;			bd.lock();			for (var $_y:uint = 0;$_y < bd.height;$_y++) {				$_colour = $_colour - variation + Math.round(Math.random() * variation * 2);				for (var $_x:uint = 0;$_x < bd.width;$_x++) bd.setPixel($_x, $_y, $_colour);			}			bd.unlock();		}						public function get target():DisplayObject {			return _target;		}						public function get flickerFrequency():Number {			return _flickerFrequency;		}						public function get displacementStrength():Number {			return _displacementStrength;		}						public function get displacementVariation():Number {			return _displacementVariation;		}						public function get displacementMode():String {			return _displacementMode;		}						public function get bounds():Rectangle {			return _bounds;		}						public function get visible():Boolean {			return _visible;		}						public function get x():Number {			return this.bounds.x;		}						public function get y():Number {			return this.bounds.y;		}						public function get width():Number {			return this.bounds.width;		}						public function get height():Number {			return this.bounds.height;		}						private function get filters():Array {			return _filters;		}						private function get displacementMap():BitmapData {			return _displacementMap;		}						public function set visible(value:Boolean):void {			if (this.visible == value) return;			if (value) _filters = this.target.filters;			_visible = value;			this.redraw(true);		}	}}