package mohu.core.display.frameAnimation {	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.errors.IllegalOperationError;	import flash.events.Event;	import flash.geom.Rectangle;	/**	 * @author Tim Kendrick	 * 	 * improves performance of animations by iterating thorugh the frames and caching them into BitmapData before playback	 */	public class BitmapAnimation extends Bitmap {		public static function load(source:MovieClip, width:int = 0, height:int = 0, transparent:Boolean = true, fillColour:uint = 0x00000000):Array {			var a:Array = [];			if (source) {				if ((width <= 0) || (height <= 0)) {					var r:Rectangle = source.getBounds(source);					if (width <= 0) r.width = r.right;					if (height <= 0) r.height = r.bottom;				}				for (var i:int = 1;i <= source.totalFrames;i++) {					source.gotoAndStop(i);					var bd:BitmapData = new BitmapData(width, height, transparent, fillColour);					bd.draw(source);					a.push(bd);				}			}			return a;		}		private var _isPlaying:Boolean;		private var _isLooping:Boolean;		private var _frames:Array = [];		private var _currentFrame:int = -1;		private var _pixelSnapping:String;		private var _smoothing:Boolean;		public function BitmapAnimation(frames:Array, paused:Boolean = false, loop:Boolean = true, smoothing:Boolean = false, pixelSnapping:String = "auto") {			super();			_isLooping = loop;			playing = !paused;			_pixelSnapping = pixelSnapping;			_smoothing = smoothing;			_frames = frames;			currentFrame = 0;		}						public function gotoAndPlay(frame:uint):void {			currentFrame = frame;			playing = true;		}						public function gotoAndStop(frame:uint):void {			playing = false;			currentFrame = frame;		}						public function play():void {			playing = true;		}						public function stop():void {			playing = false;		}						private function onEnterFrame(e:Event):void {			if (totalFrames == 0) return;			if (currentFrame == (totalFrames - 1)) {				currentFrame = 0;				if (!loop) playing = false;			} else {				currentFrame++;			}		}						public function get playing():Boolean {			return _isPlaying;		}						public function get loop():Boolean {			return _isLooping;		}						public function get frames():Array {			return _frames.slice();		}						public function get currentFrame():int {			return _currentFrame;		}						public function get totalFrames():uint {			return _frames.length;		}						override public function get pixelSnapping():String {			return _pixelSnapping;		}						override public function get smoothing():Boolean {			return _smoothing;		}						public function set playing(value:Boolean):void {			if (_isPlaying == value) return;			_isPlaying = value;			if (value) addEventListener(Event.ENTER_FRAME, onEnterFrame, false, 0, true); else removeEventListener(Event.ENTER_FRAME, onEnterFrame);		}						public function set loop(value:Boolean):void {			_isLooping = value;		}						public function set currentFrame(value:int):void {			value = Math.max(0, Math.min(totalFrames - 1, value));			if (_currentFrame == value) return;			_currentFrame = value;			super.bitmapData = frames[value];			super.pixelSnapping = pixelSnapping;			super.smoothing = smoothing;		}						override public function set pixelSnapping(_value:String):void {			super.pixelSnapping = _pixelSnapping = _value;		}						override public function set smoothing(_value:Boolean):void {			super.smoothing = _smoothing = _value;		}						override public function set bitmapData(_value:BitmapData):void {			throw new IllegalOperationError("bitmapData must me set at instantiation");		}	}}